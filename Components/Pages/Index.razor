@page "/"
@using SOA_CA2_Frontend.Services
@using SOA_CA2_Frontend.Components.Pages
@inject IJSRuntime JS
@inject ApiService ApiService


<link href="/css/Index.css" rel="stylesheet" />

<div class="home-container">
    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
        <div class="alert alert-success">
            @SuccessMessage
        </div>
    }
    <!-- Hero Section -->
    <div class="hero">
        <div class="hero-text">
            <span class="hero-subtitle">Your One-Stop Shop</span>
            <h1 class="hero-title">Slick. Modern.<br />Everything You Need.</h1>
            <p class="hero-description">Discover the best products across categories. Exclusive deals just for you!</p>
            <button class="shop-now-btn">Start Shopping</button>
        </div>
        <div class="hero-image">
            <img src="images/shopping-girl.png" alt="Woman shopping" />
        </div>
    </div>
</div>
<Products />

@code { 

    private string SuccessMessage => ApiService.SuccessMessage;
    private bool hasInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Retrieve token from local storage on page initialization
            var storedToken = await JS.InvokeAsync<string>("sessionStorage.getItem", "userToken");
            var storedApiKey = await JS.InvokeAsync<string>("sessionStorage.getItem", "userApiKey");
            var storedRole = await JS.InvokeAsync<string>("sessionStorage.getItem", "role");

            if (!string.IsNullOrEmpty(storedToken) && !string.IsNullOrEmpty(storedApiKey))
            {
                ApiService.SetTokenAndLoginStatus(storedToken, storedApiKey, true);
            }

            StateHasChanged(); // Notify UI to update after retrieving token
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ApiService.OnChange += StateHasChanged;

        if (!string.IsNullOrEmpty(SuccessMessage))
        {
            await Task.Delay(5000); // Wait for 5 seconds
            ApiService.SuccessMessage = string.Empty; // Clear the message
            ApiService.NotifyStateChanged(); // Notify UI to update
        }
    }


    public void Dispose()
    {
        ApiService.OnChange -= StateHasChanged;
    }
}