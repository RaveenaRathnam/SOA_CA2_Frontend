@page "/cart"
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@using SOA_CA2_Frontend.Models
@using SOA_CA2_Frontend.Services

<link href="/css/Cart.css" rel="stylesheet" />

<h2>Shopping Cart</h2>

@if (cartItems == null)
{
    <p>Loading cart items...</p>
}
else if (cartItems.Count == 0)
{
    <p>Your cart is empty.</p>
}
else
{
    <div class="cart-container">
        @foreach (var item in cartItems)
        {
            <div class="cart-item">
                <img src="@item.imageUrl" alt="@item.productName" class="product-image" />
                <h3>@item.productName</h3>
                <p>Price: $@item.price</p>
                <p>Quantity: @item.quantity</p>
                <button class="remove-btn" @onclick="() => RemoveItem(item.product_Id)">Remove</button>
            </div>
        }
        <div class="cart-actions" style="display:flex;">
            <button class="clear-btn" @onclick="ClearCart">Clear Cart</button>
            <button class="checkout-btn" @onclick="PlaceOrder">Checkout</button>
        </div>
    </div>
   
}

@code {
    private List<CartItemModel> cartItems = new();
    

    protected override async Task OnInitializedAsync()
    {
        await LoadCartItems();
    }

    private async Task LoadCartItems()
    {
        cartItems = await ApiService.GetCartItemsAsync();

        // Fetch additional product details for each cart item
        foreach (var cartItem in cartItems)
        {
            var product = await ApiService.GetProductByIdAsync(cartItem.product_Id);
            if (product != null)
            {
                cartItem.productName = product.product_Name;
                cartItem.price = product.price;
                cartItem.imageUrl = product.imageUrl;
            }
        }
    }


    private async Task RemoveItem(int productId)
    {
        bool success = await ApiService.RemoveFromCartAsync(productId);  

        if (success)
        {
            // Refresh the cart items after removal
            await LoadCartItems();
        }
        else
        {
            Console.WriteLine("Failed to remove item from cart.");
        }
    }


    private async Task ClearCart()
    {
        bool success = await ApiService.ClearCartAsync(); 

        if (success)
        {
            // Refresh the cart items after clearing the cart
            await LoadCartItems();
        }
        else
        {
            Console.WriteLine("Failed to clear cart.");
        }
    }
    private async Task PlaceOrder()
    {
        // Get user ID from the ApiService
        int currentUserId = ApiService.userId;

        // Prepare the order model
        var order = new OrderModel
            {
                user_Id = currentUserId, 
                order_Date = DateTime.Now,
                total_Amount = cartItems.Sum(item => item.price * item.quantity),
                status = 1, 
                createdAt = DateTime.Now,
                orderItems = cartItems.Select(item => new OrderItemModel
                {
                    product_Id = item.product_Id,
                    quantity = item.quantity,
                    price = item.price
                }).ToList()
            };

        // Call the API to create an order
        bool success = await ApiService.CreateOrderAsync(order);

        if (success)
        {
            Console.WriteLine("Order placed successfully.");
            // Navigate to the Orders page
            NavigationManager.NavigateTo("/orders");
        }
        else
        {
            Console.WriteLine("Failed to place the order. Please try again.");
        }
    }


}
