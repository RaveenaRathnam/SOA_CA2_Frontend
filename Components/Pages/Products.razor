@using SOA_CA2_Frontend.Services;
@inject ApiService ApiService;
@using SOA_CA2_Frontend.Models;

<link href="/css/Products.css" rel="stylesheet" />

<!-- Search and Filter Section -->
<div class="search-filter-container">
    <div class="search-bar">
        <input type="text" placeholder="Search products..." @bind="searchTerm" />
        <button class="search-btn" @onclick="ApplyFilters">
            🔍
        </button>
    </div>
    <div class="filter-bar">
        <select @bind="selectedGender" @onclick="ApplyFilters">
            <option value="">All Genders</option>
            <option value="0">Male</option>
            <option value="1">Female</option>
            <option value="2">Unisex</option>
        </select>
        <select @bind="selectedCategory" @onclick="ApplyFilters">
            <option value="">All Categories</option>
            @foreach (var category in categories)
            {
                <option value="@category.category_Id">@category.categoryName</option>
            }
        </select>
        <button class="filter-btn" @onclick="ResetFilters">
            🔄 Reset
        </button>
    </div>
</div>

<div class="products-container">
    @if (filteredProducts.Count == 0)
    {
        <p>No products found matching the criteria.</p>
    }
    else
    {
        foreach (var product in filteredProducts)
        {
            <div class="product-card">
                <div class="product-image-container">
                    <img src="@product.imageUrl" alt="@product.product_Name" class="product-image" />
                    <div class="overlay-icons">
                        @if (ApiService.IsLoggedIn)
                        {
                            <button class="icon-btn" @onclick="() => AddToCart(product)">
                                🛒
                            </button>
                        }
                        <button class="icon-btn" @onclick="() => OpenQuickView(product)">
                            👁️
                        </button>
                    </div>
                </div>
                <div class="product-details">
                    <h3>@product.product_Name</h3>
                    <p class="price">$@product.price</p>
                    <p>@product.genderName</p>
                    <span class="product-category">@product.categoryName</span>
                </div>
            </div>
        }
    }
</div>

<!-- Quick View Modal -->
@if (selectedProduct != null)
{
    <div class="modal-overlay" @onclick="CloseQuickView">
        <div class="modal-content" @onclick:stopPropagation="true">
            <button class="close-btn" @onclick="CloseQuickView">×</button>
            <div class="modal-body">
                <div class="modal-image">
                    <img src="@selectedProduct.imageUrl" alt="@selectedProduct.product_Name" />
                </div>
                <div class="modal-details">
                    <h3>@selectedProduct.product_Name</h3>
                    <p class="price">$@selectedProduct.price</p>
                    <p>@selectedProduct.genderName</p>
                    <span class="product-category">@selectedProduct.categoryName</span>
                    <p>@selectedProduct.description</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ProductModel> products = new();
    private List<ProductModel> filteredProducts = new();
    private List<CategoryModel> categories = new();
    private ProductModel selectedProduct = null;

    private string searchTerm = string.Empty;
    private string selectedGender = string.Empty;
    private string selectedCategory = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Fetch products and categories
        products = await ApiService.GetProductsAsync();
        categories = await ApiService.GetCategoriesAsync();

        // Map category names for products
        foreach (var product in products)
        {
            product.categoryName = categories.FirstOrDefault(c => c.category_Id == product.category_Id)?.categoryName ?? "Unknown";
        }

        // Initialize filtered products to show all by default
        filteredProducts = new List<ProductModel>(products);
    }

    private async Task AddToCart(ProductModel product)
    {
        // Prepare the cart item model
        var cartItem = new CartItemModel
            {
                cartItem_Id = 1,
                cart_Id = 2,
                product_Id = product.product_Id,
                quantity = 1
            };

        // Call the API to add the item to the cart
        var success = await ApiService.AddToCartAsync(cartItem);

        if (success)
        {
            // Show a success message
            Console.WriteLine($"Added {product.product_Name} to cart.");
        }
        else
        {
            // Show an error message
            Console.WriteLine($"Failed to add {product.product_Name} to cart.");
        }
    }

    private void OpenQuickView(ProductModel product)
    {
        selectedProduct = product;
    }

    private void CloseQuickView()
    {
        selectedProduct = null;
    }

    private void ApplyFilters()
    {
        // Convert filter values to proper types
        int? genderFilter = string.IsNullOrEmpty(selectedGender) ? null : int.Parse(selectedGender);
        int? categoryFilter = string.IsNullOrEmpty(selectedCategory) ? null : int.Parse(selectedCategory);

        // Apply filters and search term
        filteredProducts = products
            .Where(p => string.IsNullOrEmpty(searchTerm) || p.product_Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Where(p => !genderFilter.HasValue || p.gender == genderFilter.Value)
            .Where(p => !categoryFilter.HasValue || p.category_Id == categoryFilter.Value)
            .ToList();
    }

    private void ResetFilters()
    {
        // Clear all filters
        searchTerm = string.Empty;
        selectedGender = string.Empty;
        selectedCategory = string.Empty;

        // Reset filtered products to show all
        filteredProducts = new List<ProductModel>(products);
    }
}
